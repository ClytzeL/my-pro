/*
 * 背包问题 
 * 问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，
 * 我们如何选择，才能使得物品的总价格最高。问题的名称来源于如何选择最合适的物品放置于给定背包中。
 * @Author: liyan52 
 * @Date: 2020-08-03 14:45:44 
 * @Last Modified by: liyan52
 * @Last Modified time: 2020-08-03 15:25:36
 */
// 动态规划（Dynamic Programming）用于求解背包问题中的整数背包问题（即每种物品所选的个数必须是整数）
// 状态转移方程
// 无后效性：未来与过去无关，严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。
// 最优子结构：大问题的最优解可以由小问题的最优解推出
// 如何判断一个问题能否使用DP解决：能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。
// 在可能解空间内，寻找最优解
// DP的核心思想：尽量缩小可能解空间。
// 在暴力算法中，可能解空间往往是指数级的大小；如果我们采用DP，那么有可能把解空间的大小降到多项式级。